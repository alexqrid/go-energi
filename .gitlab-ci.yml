variables:

stages:
  - base
  - clean
  - lint
  - build
  - test
  - deploy

build-builder:
  stage: base
  tags: [docker_runner]
  before_script:
    - apk add --no-cache curl unzip python3 py3-pip
    - pip3 install --upgrade pip
    - pip3 install awscli
    - rm -rf /var/cache/apk/*
  script:
    - aws ecr get-login-password --region ${aws_region} | docker login --username AWS --password-stdin ${container_registry}
    - docker build -t energi3_builder:${CI_COMMIT_REF_NAME} -f Dockerfile.builder --build-arg repository_remote=${repository_remote} .
    - docker tag energi3_builder:${CI_COMMIT_REF_NAME} ${container_registry}/energi3_builder:${CI_COMMIT_REF_NAME}
    - docker push ${container_registry}/energi3_builder:${CI_COMMIT_REF_NAME}
    - docker tag energi3_builder:${CI_COMMIT_REF_NAME} ${container_registry}/energi3_builder:latest
    - docker push ${container_registry}/energi3_builder:latest
  rules:
    - changes:
      - Dockerfile.builder

# make sure our repo does not have any artifacts of previous builds
clean-repo:
  stage: clean
  image: ${container_registry}/energi3_builder
  before_script:
    - pwd
  script:
    - git checkout -- .
    - git clean -fdx .
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# TODO: this actually tries to execute the merge, may not be the best way to check this
# it will also fail for master branch merges
branch-check:
  stage: clean
  image: ${container_registry}/energi3_builder
  before_script:
    - pwd
  script:
    - if [[ "$(git merge origin/develop)" != "Already up to date." ]]; then echo "[Error] branch is not up to date with develop"; git merge --abort; exit 1; fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

lint-go:
  stage: lint
  image: ${container_registry}/energi3_builder
  script:
    - make lint-go
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

lint-sol-tests:
  stage: lint
  image: ${container_registry}/energi3_builder
  script:
    - make lint-sol-tests
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

lint-sol:
  stage: lint
  image: ${container_registry}/energi3_builder
  script:
    - make lint-sol
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

build-linux:
  stage: build
  image: ${container_registry}/energi3_builder
  before_script:
    - pwd
  script:
    - make all
    - if [[ -z "$(git status --porcelain)" ]]; then echo "Working directory clean"; else echo "[Error] compile job left modified files in working directory"; exit 1; fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

build-release-linux:
  stage: build
  image: ${container_registry}/energi3_builder
  before_script:
    - pwd
  script:
    - make -f Makefile.release release-linux
  only:
    - develop
    - master

build-release-windows:
  stage: build
  image: ${container_registry}/energi3_builder
  before_script:
    - pwd
  script:
    - make -f Makefile.release release-windows
  only:
    - develop
    - master

# TODO: macos is a native compile, this can't run in docker needs a macos runner
#release-build-macos:
#  stage: build
#  script:
#    - make -f Makefile.release release-macos
#  rules:
#    - only:
#      - develop
#      - master

deploy-release:
  stage: deploy
  image: ${container_registry}/energi3_builder
  before_script:
    - pwd
  script:
    - make -f Makefile.release release-upload
  only:
    - develop
    - master

## must run make all
## must complete successfully
## must not leave modified files in the git repository
#compile:
#  stage: build
#  extends: .runner
#  script:
#    - export GOROOT=/usr/local/go
#    - export GOPATH=${CI_PROJECT_DIR//$CI_PROJECT_PATH/}
#    - export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
#    - echo $CI_PROJECT_DIR
#    - echo $CI_PROJECT_PATH
#    - echo $GOROOT
#    - echo $GOPATH
#    - echo $PATH
#    - make all
#    - if [[ -z "$(git status --porcelain)" ]]; then echo "Working directory clean"; else echo "[Error] compile job left modified files in working directory"; exit 1; fi
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

## must run make test
## must complete successfully (tests must pass)
## must not leave modified files in the git repository
#pr-test:
#  stage: unit-tests
#  extends: .runner
#  script:
#    - export GOROOT=/usr/local/go
#    - export GOPATH=${CI_PROJECT_DIR//$CI_PROJECT_PATH/}
#    - export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
#    - make test-go
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#
## must run make lint
## must complete successfully
#pr-lint:
#  stage: lint
#  extends: .runner
#  script:
#    - export GOROOT=/usr/local/go
#    - export GOPATH=${CI_PROJECT_DIR//$CI_PROJECT_PATH/}
#    - export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
#    # - make lint
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#
## must run docker build -f Dockerfile -t [tag] .
## [tag] must be appropriate for pushing to our private registry
## must push image to our private registry
#registry:
#  stage: container
#  extends: .runner
#  script:
#    - docker build -f Dockerfile -t [core:master] .
#    - docker login ${CI_REGISTRY} -u gitlab-ci-token -p ${CI_BUILD_TOKEN}
#    - docker tag core:latest ${CI_REGISTRY_IMAGE}/core:master
#    - docker push ${CI_REGISTRY_IMAGE}/core:master
#  rules:
#    - if: '$CI_COMMIT_BRANCH == "master"'
#
## must produce a complete set of release binaries
## must deploy binaries to s3 with SHASUMS file
## must produce a production docker build and push to dockerhub
#release:
#  stage: binary
#  extends: .runner
#  script:
#    - echo
#  rules:
#    - if: '$CI_COMMIT_BRANCH == "master"'
