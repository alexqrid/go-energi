variables:
  
stages:
  - unit-tests
  - lint
  - build
  - container
  - binary

.runner:
  tags: [runner02]

# must run make test
# must complete successfully (tests must pass)
# must not leave modified files in the git repository
pr-test:
  stage: unit-tests
  extends: .runner
  script:
    - export GOROOT=/usr/local/go
    - export GOPATH=${CI_PROJECT_DIR//$CI_PROJECT_PATH/}
    - export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
    - make test-go
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# must run make lint
# must complete successfully
pr-lint:
  stage: lint
  extends: .runner
  script:
    - export GOROOT=/usr/local/go
    - export GOPATH=${CI_PROJECT_DIR//$CI_PROJECT_PATH/}
    - export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
    # - make lint
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# must run make all
# must complete successfully
# must not leave modified files in the git repository
pr-build:
  stage: build
  extends: .runner
  script:
    - export GOROOT=/usr/local/go
    - export GOPATH=${CI_PROJECT_DIR//$CI_PROJECT_PATH/}
    - export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
    - make all
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# must run docker build -f Dockerfile -t [tag] .
# [tag] must be appropriate for pushing to our private registry
# must push image to our private registry
registry:
  stage: container
  extends: .runner
  script:
    - docker build -f Dockerfile -t [core:master] .
    - docker login ${CI_REGISTRY} -u gitlab-ci-token -p ${CI_BUILD_TOKEN}
    - docker tag core:latest ${CI_REGISTRY_IMAGE}/core:master
    - docker push ${CI_REGISTRY_IMAGE}/core:master
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

# must produce a complete set of release binaries
# must deploy binaries to s3 with SHASUMS file
# must produce a production docker build and push to dockerhub
release:
  stage: binary
  extends: .runner
  script:
    - echo
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'