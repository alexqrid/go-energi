// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "energi.world/core/gen3"
	"energi.world/core/gen3/accounts/abi"
	"energi.world/core/gen3/accounts/abi/bind"
	"energi.world/core/gen3/common"
	"energi.world/core/gen3/core/types"
	"energi.world/core/gen3/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HardforkRegistryV1ABI is the input ABI used to generate the binding from.
const HardforkRegistryV1ABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_HF_signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_HF_finalization_period\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block_no\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"block_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sw_features\",\"type\":\"uint256\"}],\"name\":\"Hardfork\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"HF_signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerateActive\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerateAll\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumeratePending\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hardfork_name\",\"type\":\"bytes32\"}],\"name\":\"getHardfork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"block_no\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"block_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sw_features\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_oldImpl\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"block_no\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"block_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sw_features\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hardfork_name\",\"type\":\"bytes32\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v1storage\",\"outputs\":[{\"internalType\":\"contractStorageHardforkRegistryV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// HardforkRegistryV1Bin is the compiled bytecode used for deploying new contracts.
const HardforkRegistryV1Bin = `60806040523480156200001157600080fd5b506040516200326d3803806200326d833981810160405260608110156200003757600080fd5b5080516020820151604090920151600080546001600160a01b0319166001600160a01b0384169081179091559192918390620000d557306103056040516200007f906200013c565b6001600160a01b03928316815291166020820152604080519182900301906000f080158015620000b3573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790555b50604051620000e4906200014a565b604051809103906000f08015801562000101573d6000803e3d6000fd5b50600380546001600160a01b039283166001600160a01b03199182161790915560028054949092169316929092179091556004555062000158565b6112ea80620017d483390190565b6107af8062002abe83390190565b61166c80620001686000396000f3fe6080604052600436106100c65760003560e01c806395bc267311610074578063ce5494bb1161004e578063ce5494bb14610328578063e1d6f43a14610368578063ec5568891461037d576100c6565b806395bc267314610284578063bc393afb146102ae578063ca89ad5f14610313576100c6565b80632d059305116100a55780632d059305146101e957806344d396ff146101fe5780635c36901c14610246576100c6565b8062f55d9d1461012d578063072a98231461016f5780631894d2ea146101ab575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b34801561013957600080fd5b5061016d6004803603602081101561015057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610392565b005b34801561017b57600080fd5b5061016d6004803603608081101561019257600080fd5b508035906020810135906040810135906060013561043a565b3480156101b757600080fd5b506101c0610b51565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101f557600080fd5b506101c0610b6d565b34801561020a57600080fd5b506102286004803603602081101561022157600080fd5b5035610b89565b60408051938452602084019290925282820152519081900360600190f35b34801561025257600080fd5b506102706004803603602081101561026957600080fd5b5035610c49565b604080519115158252519081900360200190f35b34801561029057600080fd5b5061016d600480360360208110156102a757600080fd5b5035610d20565b3480156102ba57600080fd5b506102c36110b4565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102ff5781810151838201526020016102e7565b505050509050019250505060405180910390f35b34801561031f57600080fd5b506102c361120c565b34801561033457600080fd5b5061016d6004803603602081101561034b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166112f0565b34801561037457600080fd5b506102c361137e565b34801561038957600080fd5b506101c061145b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461041857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61042181611477565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600154156104a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805560025473ffffffffffffffffffffffffffffffffffffffff166104ce611506565b73ffffffffffffffffffffffffffffffffffffffff161461055057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f496e76616c69642068617264666f726b207369676e65722063616c6c65720000604482015290519081900360640190fd5b826105bc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f48617264666f726b206e616d652063616e6e6f7420626520656d707479000000604482015290519081900360640190fd5b600354604080517f1e914cfd000000000000000000000000000000000000000000000000000000008152600481018690529051600092839273ffffffffffffffffffffffffffffffffffffffff90911691631e914cfd91602480820192608092909190829003018186803b15801561063357600080fd5b505afa158015610647573d6000803e3d6000fd5b505050506040513d608081101561065d57600080fd5b50805160209091015190925090508015610789578581146106c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806115366028913960400191505060405180910390fd5b4360045487011015610726576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806115e76027913960400191505060405180910390fd5b438610156107845783610784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061160e602a913960400191505060405180910390fd5b610a49565b600454430186116107e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806115be6029913960400191505060405180910390fd5b600354604080517f044d880d000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163044d880d916004808301926000929190829003018186803b15801561085057600080fd5b505afa158015610864573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156108ab57600080fd5b81019080805160405193929190846401000000008211156108cb57600080fd5b9083019060208201858111156108e057600080fd5b82518660208202830111640100000000821117156108fd57600080fd5b82525081516020918201928201910280838360005b8381101561092a578181015183820152602001610912565b50505050905001604052505050905060008090505b8151811015610a4657600354825173ffffffffffffffffffffffffffffffffffffffff90911690631e914cfd9084908490811061097857fe5b60200260200101516040518263ffffffff1660e01b81526004018082815260200191505060806040518083038186803b1580156109b457600080fd5b505afa1580156109c8573d6000803e3d6000fd5b505050506040513d60808110156109de57600080fd5b5060200151925087831415610a3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603c81526020018061155e603c913960400191505060405180910390fd5b60010161093f565b50505b600354604080517fbad612cd00000000000000000000000000000000000000000000000000000000815260048101899052602481018790526044810188905260648101869052905173ffffffffffffffffffffffffffffffffffffffff9092169163bad612cd9160848082019260009290919082900301818387803b158015610ad157600080fd5b505af1158015610ae5573d6000803e3d6000fd5b505050851580159150610af757508315155b15610b445760408051878152602081018690528082018790526060810185905290517fb22930fde3f4a5bddcb906dc3248ab30f4549101ef99a59fbfbf6121d74c17c59181900360800190a15b5050600060015550505050565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b600354604080517f1e914cfd0000000000000000000000000000000000000000000000000000000081526004810184905290516000928392839273ffffffffffffffffffffffffffffffffffffffff90921691631e914cfd91602480820192608092909190829003018186803b158015610c0257600080fd5b505afa158015610c16573d6000803e3d6000fd5b505050506040513d6080811015610c2c57600080fd5b506020810151604082015160609092015190969195509350915050565b600081610c5857506000610d1b565b600354604080517f1e914cfd000000000000000000000000000000000000000000000000000000008152600481018590529051600092839273ffffffffffffffffffffffffffffffffffffffff90911691631e914cfd91602480820192608092909190829003018186803b158015610ccf57600080fd5b505afa158015610ce3573d6000803e3d6000fd5b505050506040513d6080811015610cf957600080fd5b5080516020909101519092509050438111801590610d1657508115155b925050505b919050565b60015415610d8f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805560025473ffffffffffffffffffffffffffffffffffffffff16610db4611506565b73ffffffffffffffffffffffffffffffffffffffff1614610e3657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f496e76616c69642068617264666f726b207369676e65722063616c6c65720000604482015290519081900360640190fd5b80610ea257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f48617264666f726b206e616d652063616e6e6f7420626520656d707479000000604482015290519081900360640190fd5b600354604080517f1e914cfd0000000000000000000000000000000000000000000000000000000081526004810184905290516000928392839273ffffffffffffffffffffffffffffffffffffffff90921691631e914cfd91602480820192608092909190829003018186803b158015610f1b57600080fd5b505afa158015610f2f573d6000803e3d6000fd5b505050506040513d6080811015610f4557600080fd5b5080516020820151604090920151909450909250905082610fc757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f48617264666f726b206e616d6520697320756e6b6e6f776e0000000000000000604482015290519081900360640190fd5b801561101e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061159a6024913960400191505060405180910390fd5b600354604080517f39270b0300000000000000000000000000000000000000000000000000000000815260048101869052905173ffffffffffffffffffffffffffffffffffffffff909216916339270b039160248082019260009290919082900301818387803b15801561109157600080fd5b505af11580156110a5573d6000803e3d6000fd5b50506000600155505050505050565b600354604080517f044d880d000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163044d880d916004808301926000929190829003018186803b15801561111f57600080fd5b505afa158015611133573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561117a57600080fd5b810190808051604051939291908464010000000082111561119a57600080fd5b9083019060208201858111156111af57600080fd5b82518660208202830111640100000000821117156111cc57600080fd5b82525081516020918201928201910280838360005b838110156111f95781810151838201526020016111e1565b5050505090500160405250505090505b90565b6060600080606061121b6110b4565b905060005b815181101561125e57600082828151811061123757fe5b6020026020010151905061124a81610c49565b611255576001909301925b50600101611220565b5060608260405190808252806020026020018201604052801561128b578160200160208202803883390190505b50905060005b82518110156112e75760008382815181106112a857fe5b602002602001015190506112bb81610c49565b6112de57808387815181106112cc57fe5b60209081029190910101526001909501945b50600101611291565b50935050505090565b60005473ffffffffffffffffffffffffffffffffffffffff16331461137657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61137b815b50565b6060600080606061138d6110b4565b905060005b81518110156113d15760008282815181106113a957fe5b602002602001015190506113bc81610c49565b156113c8576001909301925b50600101611392565b506060826040519080825280602002602001820160405280156113fe578160200160208202803883390190505b50905060005b82518110156112e757600083828151811061141b57fe5b6020026020010151905061142e81610c49565b15611452578083878151811061144057fe5b60209081029190910101526001909501945b50600101611404565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600354604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff1633141561152e575032611209565b503361120956fe4475706c69636174652068617264666f726b206e616d657320617265206e6f7420616c6c6f7765644475706c696361746520626c6f636b206e756d6265727320666f7220756e697175652068617264666f726b7320617265206e6f7420616c6c6f77656446696e616c697a65642068617264666f726b2063616e6e6f742062652064656c6574656448617264666f726b2063616e6e6f74206265207363686564756c656420696d6d6564696174656c792e48617264666f726b2066696e616c697a6174696f6e20696e74657276616c20657863656564656448462066696e616c697a6174696f6e20626c6f636b20686173682063616e6e6f7420626520656d707479a265627a7a723158204fd29065a8296008cad1116b140f311e4330000216912c6f3659be5ad3b631a264736f6c63430005100032608060405234801561001057600080fd5b506040516112ea3803806112ea8339818101604052604081101561003357600080fd5b508051602090910151600180546001600160a01b039384166001600160a01b031991821617909155600280549390921692169190911790556112708061007a6000396000f3fe6080604052600436106100c65760003560e01c80638abf607711610074578063ce5494bb1161004e578063ce5494bb14610179578063dd6a851d146103c1578063ec556889146103d6576100c6565b80638abf607714610307578063a1b0e4761461031c578063b364595e1461035c576100c6565b80635b6dee4c116100a55780635b6dee4c146102645780636d5b6c441461029d5780636fa09ab0146102dd576100c6565b8062f55d9d146101795780630900f010146101bb57806332e3a905146101fb575b32331461013457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4f6e6c79206469726563742063616c6c732061726520616c6c6f776564210000604482015290519081900360640190fd5b60015460405173ffffffffffffffffffffffffffffffffffffffff909116903660008237600080368334866127105a03f13d6000833e808015610175573d83f35b3d83fd5b34801561018557600080fd5b506101b96004803603602081101561019c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166103eb565b005b3480156101c757600080fd5b506101b9600480360360208110156101de57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610452565b34801561020757600080fd5b5061023b6004803603602081101561021e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108c5565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61023b6004803603604081101561027a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356108ed565b3480156102a957600080fd5b5061023b600480360360208110156102c057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610d84565b3480156102e957600080fd5b5061023b6004803603602081101561030057600080fd5b5035610daf565b34801561031357600080fd5b5061023b610de3565b34801561032857600080fd5b506101b96004803603602081101561033f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610dff565b34801561036857600080fd5b50610371610fc3565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103ad578181015183820152602001610395565b505050509050019250505060405180910390f35b3480156103cd57600080fd5b5061023b611077565b3480156103e257600080fd5b5061023b611093565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f476f6f6420747279000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600054156104c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600081815573ffffffffffffffffffffffffffffffffffffffff808416825260036020526040909120549154918116911681141561056257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920616374697665210000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166105e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742072656769737465726564210000000000000000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561062a57600080fd5b505afa15801561063e573d6000803e3d6000fd5b505050506040513d602081101561065457600080fd5b50516106c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f742061636365707465642100000000000000000000000000000000000000604482015290519081900360640190fd5b600154604080517fce5494bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482018190529151919284169163ce5494bb9160248082019260009290919082900301818387803b15801561073857600080fd5b505af115801561074c573d6000803e3d6000fd5b5050600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff868116918217909255604080517ef55d9d000000000000000000000000000000000000000000000000000000008152600481019290925251918516935062f55d9d925060248082019260009290919082900301818387803b1580156107ed57600080fd5b505af1158015610801573d6000803e3d6000fd5b5050505061080e83611097565b8273ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561085657600080fd5b505af115801561086a573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8781168252915191861693507f5d611f318680d00598bb735d61bacf0c514c6b50e1e5ad30040a4df2b12791c7925081900360200190a250506000805550565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b600032331461095d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4f6e6c79206469726563742063616c6c732061726520616c6c6f776564210000604482015290519081900360640190fd5b600054156109cc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600160008190555473ffffffffffffffffffffffffffffffffffffffff84811691161415610a5b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920616374697665210000000000000000000000000000000000604482015290519081900360640190fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663ec5568896040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610aba57600080fd5b505af1158015610ace573d6000803e3d6000fd5b505050506040513d6020811015610ae457600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614610b6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f57726f6e672070726f7879210000000000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691638abf6077916004808301926020929190829003018186803b158015610bd357600080fd5b505afa158015610be7573d6000803e3d6000fd5b505050506040513d6020811015610bfd57600080fd5b5051604080517f62877ccd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790523360448301529151929350600092918416916362877ccd913491606480830192602092919082900301818588803b158015610c8457600080fd5b505af1158015610c98573d6000803e3d6000fd5b50505050506040513d6020811015610caf57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff80821660008181526003602090815260408083208054958c167fffffffffffffffffffffffff000000000000000000000000000000000000000096871681179091556004805460018101825594527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9093018054909516841790945583519283529251939450927f812eb2689eecf94cfb55caf4a123ea76c6d93eef07dd54a5273b7a4949f7d763929181900390910190a260008055949350505050565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152600360205260409020541690565b60048181548110610dbc57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60005415610e6e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600090815573ffffffffffffffffffffffffffffffffffffffff808316825260036020526040909120541680610f0757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742072656769737465726564210000000000000000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f4f57600080fd5b505af1158015610f63573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905550610fbb82611097565b505060008055565b60045460408051828152602080840282010190915260609190818015610ff3578160200160208202803883390190505b50915060005b81811015611072576004818154811061100e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683828151811061104557fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610ff9565b505090565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b3090565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260036020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600454905b81811015611236578273ffffffffffffffffffffffffffffffffffffffff166004828154811061111357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16141561122e576004600183038154811061114b57fe5b6000918252602090912001546004805473ffffffffffffffffffffffffffffffffffffffff909216918390811061117e57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060048054806111d157fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055611236565b6001016110e7565b50505056fea265627a7a723158204304b03a5396fe82ee304678afd1117363d8bf64e4ea1478069ae0ce99c2319a64736f6c634300051000326080604052600080546001600160a01b0319163317905561078a806100256000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806339270b031161005b57806339270b031461015257806341c0e1b51461016f57806368be0cdc14610177578063bad612cd146101a65761007d565b8063044d880d1461008257806313af4035146100da5780631e914cfd1461010f575b600080fd5b61008a6101d5565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156100c65781810151838201526020016100ae565b505050509050019250505060405180910390f35b61010d600480360360208110156100f057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661022d565b005b61012c6004803603602081101561012557600080fd5b50356102fa565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61010d6004803603602081101561016857600080fd5b5035610323565b61010d61051a565b6101946004803603602081101561018d57600080fd5b50356105a3565b60408051918252519081900360200190f35b61010d600480360360808110156101bc57600080fd5b50803590602081013590604081013590606001356105c1565b6060600180548060200260200160405190810160405280929190818152602001828054801561022357602002820191906000526020600020905b81548152602001906001019080831161020f575b5050505050905090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102b357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600260208190526000918252604090912080546001820154928201546003909201549092919084565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b600081815260026020819052604090912001548190801561042b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f68617264666f726b206368616e676573206e6f74206564697461626c65000000604482015290519081900360640190fd5b60008381526002602081905260408220828155600181018390559081018290556003018190555b60015481101561051457836001828154811061046a57fe5b9060005260206000200154141561050c57805b6001547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018110156104e557600181600101815481106104b957fe5b9060005260206000200154600182815481106104d157fe5b60009182526020909120015560010161047d565b60018054806104f057fe5b6001900381819060005260206000200160009055905550610514565b600101610452565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105a057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b33ff5b600181815481106105b057fe5b600091825260209091200154905081565b60005473ffffffffffffffffffffffffffffffffffffffff16331461064757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008281526002602081905260409091200154829080156106c957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f68617264666f726b206368616e676573206e6f74206564697461626c65000000604482015290519081900360640190fd5b600084815260026020526040902080541580156106e557508415155b1561071f576001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018590555b60018101879055831561073457600381018490555b851561074257600281018690555b841561074c578481555b5050505050505056fea265627a7a723158200653c757dd7648d30bce5b68fe665fba79ce8415e5a2261ccddca5baf75d215764736f6c63430005100032`

// DeployHardforkRegistryV1 deploys a new Ethereum contract, binding an instance of HardforkRegistryV1 to it.
func DeployHardforkRegistryV1(auth *bind.TransactOpts, backend bind.ContractBackend, _proxy common.Address, _HF_signer common.Address, _HF_finalization_period *big.Int) (common.Address, *types.Transaction, *HardforkRegistryV1, error) {
	parsed, err := abi.JSON(strings.NewReader(HardforkRegistryV1ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(HardforkRegistryV1Bin), backend, _proxy, _HF_signer, _HF_finalization_period)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &HardforkRegistryV1{HardforkRegistryV1Caller: HardforkRegistryV1Caller{contract: contract}, HardforkRegistryV1Transactor: HardforkRegistryV1Transactor{contract: contract}, HardforkRegistryV1Filterer: HardforkRegistryV1Filterer{contract: contract}}, nil
}

// HardforkRegistryV1Bin is the compiled bytecode of contract after deployment.
const HardforkRegistryV1RuntimeBin = `6080604052600436106100c65760003560e01c806395bc267311610074578063ce5494bb1161004e578063ce5494bb14610328578063e1d6f43a14610368578063ec5568891461037d576100c6565b806395bc267314610284578063bc393afb146102ae578063ca89ad5f14610313576100c6565b80632d059305116100a55780632d059305146101e957806344d396ff146101fe5780635c36901c14610246576100c6565b8062f55d9d1461012d578063072a98231461016f5780631894d2ea146101ab575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b34801561013957600080fd5b5061016d6004803603602081101561015057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610392565b005b34801561017b57600080fd5b5061016d6004803603608081101561019257600080fd5b508035906020810135906040810135906060013561043a565b3480156101b757600080fd5b506101c0610b51565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101f557600080fd5b506101c0610b6d565b34801561020a57600080fd5b506102286004803603602081101561022157600080fd5b5035610b89565b60408051938452602084019290925282820152519081900360600190f35b34801561025257600080fd5b506102706004803603602081101561026957600080fd5b5035610c49565b604080519115158252519081900360200190f35b34801561029057600080fd5b5061016d600480360360208110156102a757600080fd5b5035610d20565b3480156102ba57600080fd5b506102c36110b4565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102ff5781810151838201526020016102e7565b505050509050019250505060405180910390f35b34801561031f57600080fd5b506102c361120c565b34801561033457600080fd5b5061016d6004803603602081101561034b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166112f0565b34801561037457600080fd5b506102c361137e565b34801561038957600080fd5b506101c061145b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461041857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61042181611477565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600154156104a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805560025473ffffffffffffffffffffffffffffffffffffffff166104ce611506565b73ffffffffffffffffffffffffffffffffffffffff161461055057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f496e76616c69642068617264666f726b207369676e65722063616c6c65720000604482015290519081900360640190fd5b826105bc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f48617264666f726b206e616d652063616e6e6f7420626520656d707479000000604482015290519081900360640190fd5b600354604080517f1e914cfd000000000000000000000000000000000000000000000000000000008152600481018690529051600092839273ffffffffffffffffffffffffffffffffffffffff90911691631e914cfd91602480820192608092909190829003018186803b15801561063357600080fd5b505afa158015610647573d6000803e3d6000fd5b505050506040513d608081101561065d57600080fd5b50805160209091015190925090508015610789578581146106c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806115366028913960400191505060405180910390fd5b4360045487011015610726576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806115e76027913960400191505060405180910390fd5b438610156107845783610784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061160e602a913960400191505060405180910390fd5b610a49565b600454430186116107e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806115be6029913960400191505060405180910390fd5b600354604080517f044d880d000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163044d880d916004808301926000929190829003018186803b15801561085057600080fd5b505afa158015610864573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156108ab57600080fd5b81019080805160405193929190846401000000008211156108cb57600080fd5b9083019060208201858111156108e057600080fd5b82518660208202830111640100000000821117156108fd57600080fd5b82525081516020918201928201910280838360005b8381101561092a578181015183820152602001610912565b50505050905001604052505050905060008090505b8151811015610a4657600354825173ffffffffffffffffffffffffffffffffffffffff90911690631e914cfd9084908490811061097857fe5b60200260200101516040518263ffffffff1660e01b81526004018082815260200191505060806040518083038186803b1580156109b457600080fd5b505afa1580156109c8573d6000803e3d6000fd5b505050506040513d60808110156109de57600080fd5b5060200151925087831415610a3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603c81526020018061155e603c913960400191505060405180910390fd5b60010161093f565b50505b600354604080517fbad612cd00000000000000000000000000000000000000000000000000000000815260048101899052602481018790526044810188905260648101869052905173ffffffffffffffffffffffffffffffffffffffff9092169163bad612cd9160848082019260009290919082900301818387803b158015610ad157600080fd5b505af1158015610ae5573d6000803e3d6000fd5b505050851580159150610af757508315155b15610b445760408051878152602081018690528082018790526060810185905290517fb22930fde3f4a5bddcb906dc3248ab30f4549101ef99a59fbfbf6121d74c17c59181900360800190a15b5050600060015550505050565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b600354604080517f1e914cfd0000000000000000000000000000000000000000000000000000000081526004810184905290516000928392839273ffffffffffffffffffffffffffffffffffffffff90921691631e914cfd91602480820192608092909190829003018186803b158015610c0257600080fd5b505afa158015610c16573d6000803e3d6000fd5b505050506040513d6080811015610c2c57600080fd5b506020810151604082015160609092015190969195509350915050565b600081610c5857506000610d1b565b600354604080517f1e914cfd000000000000000000000000000000000000000000000000000000008152600481018590529051600092839273ffffffffffffffffffffffffffffffffffffffff90911691631e914cfd91602480820192608092909190829003018186803b158015610ccf57600080fd5b505afa158015610ce3573d6000803e3d6000fd5b505050506040513d6080811015610cf957600080fd5b5080516020909101519092509050438111801590610d1657508115155b925050505b919050565b60015415610d8f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805560025473ffffffffffffffffffffffffffffffffffffffff16610db4611506565b73ffffffffffffffffffffffffffffffffffffffff1614610e3657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f496e76616c69642068617264666f726b207369676e65722063616c6c65720000604482015290519081900360640190fd5b80610ea257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f48617264666f726b206e616d652063616e6e6f7420626520656d707479000000604482015290519081900360640190fd5b600354604080517f1e914cfd0000000000000000000000000000000000000000000000000000000081526004810184905290516000928392839273ffffffffffffffffffffffffffffffffffffffff90921691631e914cfd91602480820192608092909190829003018186803b158015610f1b57600080fd5b505afa158015610f2f573d6000803e3d6000fd5b505050506040513d6080811015610f4557600080fd5b5080516020820151604090920151909450909250905082610fc757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f48617264666f726b206e616d6520697320756e6b6e6f776e0000000000000000604482015290519081900360640190fd5b801561101e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061159a6024913960400191505060405180910390fd5b600354604080517f39270b0300000000000000000000000000000000000000000000000000000000815260048101869052905173ffffffffffffffffffffffffffffffffffffffff909216916339270b039160248082019260009290919082900301818387803b15801561109157600080fd5b505af11580156110a5573d6000803e3d6000fd5b50506000600155505050505050565b600354604080517f044d880d000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163044d880d916004808301926000929190829003018186803b15801561111f57600080fd5b505afa158015611133573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561117a57600080fd5b810190808051604051939291908464010000000082111561119a57600080fd5b9083019060208201858111156111af57600080fd5b82518660208202830111640100000000821117156111cc57600080fd5b82525081516020918201928201910280838360005b838110156111f95781810151838201526020016111e1565b5050505090500160405250505090505b90565b6060600080606061121b6110b4565b905060005b815181101561125e57600082828151811061123757fe5b6020026020010151905061124a81610c49565b611255576001909301925b50600101611220565b5060608260405190808252806020026020018201604052801561128b578160200160208202803883390190505b50905060005b82518110156112e75760008382815181106112a857fe5b602002602001015190506112bb81610c49565b6112de57808387815181106112cc57fe5b60209081029190910101526001909501945b50600101611291565b50935050505090565b60005473ffffffffffffffffffffffffffffffffffffffff16331461137657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61137b815b50565b6060600080606061138d6110b4565b905060005b81518110156113d15760008282815181106113a957fe5b602002602001015190506113bc81610c49565b156113c8576001909301925b50600101611392565b506060826040519080825280602002602001820160405280156113fe578160200160208202803883390190505b50905060005b82518110156112e757600083828151811061141b57fe5b6020026020010151905061142e81610c49565b15611452578083878151811061144057fe5b60209081029190910101526001909501945b50600101611404565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600354604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff1633141561152e575032611209565b503361120956fe4475706c69636174652068617264666f726b206e616d657320617265206e6f7420616c6c6f7765644475706c696361746520626c6f636b206e756d6265727320666f7220756e697175652068617264666f726b7320617265206e6f7420616c6c6f77656446696e616c697a65642068617264666f726b2063616e6e6f742062652064656c6574656448617264666f726b2063616e6e6f74206265207363686564756c656420696d6d6564696174656c792e48617264666f726b2066696e616c697a6174696f6e20696e74657276616c20657863656564656448462066696e616c697a6174696f6e20626c6f636b20686173682063616e6e6f7420626520656d707479a265627a7a723158204fd29065a8296008cad1116b140f311e4330000216912c6f3659be5ad3b631a264736f6c63430005100032`

// HardforkRegistryV1 is an auto generated Go binding around an Ethereum contract.
type HardforkRegistryV1 struct {
	HardforkRegistryV1Caller     // Read-only binding to the contract
	HardforkRegistryV1Transactor // Write-only binding to the contract
	HardforkRegistryV1Filterer   // Log filterer for contract events
}

// HardforkRegistryV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type HardforkRegistryV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HardforkRegistryV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type HardforkRegistryV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HardforkRegistryV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type HardforkRegistryV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HardforkRegistryV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type HardforkRegistryV1Session struct {
	Contract     *HardforkRegistryV1 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// HardforkRegistryV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type HardforkRegistryV1CallerSession struct {
	Contract *HardforkRegistryV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// HardforkRegistryV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type HardforkRegistryV1TransactorSession struct {
	Contract     *HardforkRegistryV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// HardforkRegistryV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type HardforkRegistryV1Raw struct {
	Contract *HardforkRegistryV1 // Generic contract binding to access the raw methods on
}

// HardforkRegistryV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type HardforkRegistryV1CallerRaw struct {
	Contract *HardforkRegistryV1Caller // Generic read-only contract binding to access the raw methods on
}

// HardforkRegistryV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type HardforkRegistryV1TransactorRaw struct {
	Contract *HardforkRegistryV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewHardforkRegistryV1 creates a new instance of HardforkRegistryV1, bound to a specific deployed contract.
func NewHardforkRegistryV1(address common.Address, backend bind.ContractBackend) (*HardforkRegistryV1, error) {
	contract, err := bindHardforkRegistryV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &HardforkRegistryV1{HardforkRegistryV1Caller: HardforkRegistryV1Caller{contract: contract}, HardforkRegistryV1Transactor: HardforkRegistryV1Transactor{contract: contract}, HardforkRegistryV1Filterer: HardforkRegistryV1Filterer{contract: contract}}, nil
}

// NewHardforkRegistryV1Caller creates a new read-only instance of HardforkRegistryV1, bound to a specific deployed contract.
func NewHardforkRegistryV1Caller(address common.Address, caller bind.ContractCaller) (*HardforkRegistryV1Caller, error) {
	contract, err := bindHardforkRegistryV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &HardforkRegistryV1Caller{contract: contract}, nil
}

// NewHardforkRegistryV1Transactor creates a new write-only instance of HardforkRegistryV1, bound to a specific deployed contract.
func NewHardforkRegistryV1Transactor(address common.Address, transactor bind.ContractTransactor) (*HardforkRegistryV1Transactor, error) {
	contract, err := bindHardforkRegistryV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &HardforkRegistryV1Transactor{contract: contract}, nil
}

// NewHardforkRegistryV1Filterer creates a new log filterer instance of HardforkRegistryV1, bound to a specific deployed contract.
func NewHardforkRegistryV1Filterer(address common.Address, filterer bind.ContractFilterer) (*HardforkRegistryV1Filterer, error) {
	contract, err := bindHardforkRegistryV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &HardforkRegistryV1Filterer{contract: contract}, nil
}

// bindHardforkRegistryV1 binds a generic wrapper to an already deployed contract.
func bindHardforkRegistryV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(HardforkRegistryV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_HardforkRegistryV1 *HardforkRegistryV1Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _HardforkRegistryV1.Contract.HardforkRegistryV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_HardforkRegistryV1 *HardforkRegistryV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HardforkRegistryV1.Contract.HardforkRegistryV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_HardforkRegistryV1 *HardforkRegistryV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _HardforkRegistryV1.Contract.HardforkRegistryV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_HardforkRegistryV1 *HardforkRegistryV1CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _HardforkRegistryV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_HardforkRegistryV1 *HardforkRegistryV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HardforkRegistryV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_HardforkRegistryV1 *HardforkRegistryV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _HardforkRegistryV1.Contract.contract.Transact(opts, method, params...)
}

// HFSigner is a free data retrieval call binding the contract method 0x1894d2ea.
//
// Solidity: function HF_signer() constant returns(address)
func (_HardforkRegistryV1 *HardforkRegistryV1Caller) HFSigner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _HardforkRegistryV1.contract.Call(opts, out, "HF_signer")
	return *ret0, err
}

// HFSigner is a free data retrieval call binding the contract method 0x1894d2ea.
//
// Solidity: function HF_signer() constant returns(address)
func (_HardforkRegistryV1 *HardforkRegistryV1Session) HFSigner() (common.Address, error) {
	return _HardforkRegistryV1.Contract.HFSigner(&_HardforkRegistryV1.CallOpts)
}

// HFSigner is a free data retrieval call binding the contract method 0x1894d2ea.
//
// Solidity: function HF_signer() constant returns(address)
func (_HardforkRegistryV1 *HardforkRegistryV1CallerSession) HFSigner() (common.Address, error) {
	return _HardforkRegistryV1.Contract.HFSigner(&_HardforkRegistryV1.CallOpts)
}

// EnumerateActive is a free data retrieval call binding the contract method 0xe1d6f43a.
//
// Solidity: function enumerateActive() constant returns(bytes32[])
func (_HardforkRegistryV1 *HardforkRegistryV1Caller) EnumerateActive(opts *bind.CallOpts) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _HardforkRegistryV1.contract.Call(opts, out, "enumerateActive")
	return *ret0, err
}

// EnumerateActive is a free data retrieval call binding the contract method 0xe1d6f43a.
//
// Solidity: function enumerateActive() constant returns(bytes32[])
func (_HardforkRegistryV1 *HardforkRegistryV1Session) EnumerateActive() ([][32]byte, error) {
	return _HardforkRegistryV1.Contract.EnumerateActive(&_HardforkRegistryV1.CallOpts)
}

// EnumerateActive is a free data retrieval call binding the contract method 0xe1d6f43a.
//
// Solidity: function enumerateActive() constant returns(bytes32[])
func (_HardforkRegistryV1 *HardforkRegistryV1CallerSession) EnumerateActive() ([][32]byte, error) {
	return _HardforkRegistryV1.Contract.EnumerateActive(&_HardforkRegistryV1.CallOpts)
}

// EnumerateAll is a free data retrieval call binding the contract method 0xbc393afb.
//
// Solidity: function enumerateAll() constant returns(bytes32[])
func (_HardforkRegistryV1 *HardforkRegistryV1Caller) EnumerateAll(opts *bind.CallOpts) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _HardforkRegistryV1.contract.Call(opts, out, "enumerateAll")
	return *ret0, err
}

// EnumerateAll is a free data retrieval call binding the contract method 0xbc393afb.
//
// Solidity: function enumerateAll() constant returns(bytes32[])
func (_HardforkRegistryV1 *HardforkRegistryV1Session) EnumerateAll() ([][32]byte, error) {
	return _HardforkRegistryV1.Contract.EnumerateAll(&_HardforkRegistryV1.CallOpts)
}

// EnumerateAll is a free data retrieval call binding the contract method 0xbc393afb.
//
// Solidity: function enumerateAll() constant returns(bytes32[])
func (_HardforkRegistryV1 *HardforkRegistryV1CallerSession) EnumerateAll() ([][32]byte, error) {
	return _HardforkRegistryV1.Contract.EnumerateAll(&_HardforkRegistryV1.CallOpts)
}

// EnumeratePending is a free data retrieval call binding the contract method 0xca89ad5f.
//
// Solidity: function enumeratePending() constant returns(bytes32[])
func (_HardforkRegistryV1 *HardforkRegistryV1Caller) EnumeratePending(opts *bind.CallOpts) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _HardforkRegistryV1.contract.Call(opts, out, "enumeratePending")
	return *ret0, err
}

// EnumeratePending is a free data retrieval call binding the contract method 0xca89ad5f.
//
// Solidity: function enumeratePending() constant returns(bytes32[])
func (_HardforkRegistryV1 *HardforkRegistryV1Session) EnumeratePending() ([][32]byte, error) {
	return _HardforkRegistryV1.Contract.EnumeratePending(&_HardforkRegistryV1.CallOpts)
}

// EnumeratePending is a free data retrieval call binding the contract method 0xca89ad5f.
//
// Solidity: function enumeratePending() constant returns(bytes32[])
func (_HardforkRegistryV1 *HardforkRegistryV1CallerSession) EnumeratePending() ([][32]byte, error) {
	return _HardforkRegistryV1.Contract.EnumeratePending(&_HardforkRegistryV1.CallOpts)
}

// GetHardfork is a free data retrieval call binding the contract method 0x44d396ff.
//
// Solidity: function getHardfork(bytes32 _hardfork_name) constant returns(uint256 block_no, bytes32 block_hash, uint256 sw_features)
func (_HardforkRegistryV1 *HardforkRegistryV1Caller) GetHardfork(opts *bind.CallOpts, _hardfork_name [32]byte) (struct {
	BlockNo    *big.Int
	BlockHash  [32]byte
	SwFeatures *big.Int
}, error) {
	ret := new(struct {
		BlockNo    *big.Int
		BlockHash  [32]byte
		SwFeatures *big.Int
	})
	out := ret
	err := _HardforkRegistryV1.contract.Call(opts, out, "getHardfork", _hardfork_name)
	return *ret, err
}

// GetHardfork is a free data retrieval call binding the contract method 0x44d396ff.
//
// Solidity: function getHardfork(bytes32 _hardfork_name) constant returns(uint256 block_no, bytes32 block_hash, uint256 sw_features)
func (_HardforkRegistryV1 *HardforkRegistryV1Session) GetHardfork(_hardfork_name [32]byte) (struct {
	BlockNo    *big.Int
	BlockHash  [32]byte
	SwFeatures *big.Int
}, error) {
	return _HardforkRegistryV1.Contract.GetHardfork(&_HardforkRegistryV1.CallOpts, _hardfork_name)
}

// GetHardfork is a free data retrieval call binding the contract method 0x44d396ff.
//
// Solidity: function getHardfork(bytes32 _hardfork_name) constant returns(uint256 block_no, bytes32 block_hash, uint256 sw_features)
func (_HardforkRegistryV1 *HardforkRegistryV1CallerSession) GetHardfork(_hardfork_name [32]byte) (struct {
	BlockNo    *big.Int
	BlockHash  [32]byte
	SwFeatures *big.Int
}, error) {
	return _HardforkRegistryV1.Contract.GetHardfork(&_HardforkRegistryV1.CallOpts, _hardfork_name)
}

// IsActive is a free data retrieval call binding the contract method 0x5c36901c.
//
// Solidity: function isActive(bytes32 name) constant returns(bool)
func (_HardforkRegistryV1 *HardforkRegistryV1Caller) IsActive(opts *bind.CallOpts, name [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _HardforkRegistryV1.contract.Call(opts, out, "isActive", name)
	return *ret0, err
}

// IsActive is a free data retrieval call binding the contract method 0x5c36901c.
//
// Solidity: function isActive(bytes32 name) constant returns(bool)
func (_HardforkRegistryV1 *HardforkRegistryV1Session) IsActive(name [32]byte) (bool, error) {
	return _HardforkRegistryV1.Contract.IsActive(&_HardforkRegistryV1.CallOpts, name)
}

// IsActive is a free data retrieval call binding the contract method 0x5c36901c.
//
// Solidity: function isActive(bytes32 name) constant returns(bool)
func (_HardforkRegistryV1 *HardforkRegistryV1CallerSession) IsActive(name [32]byte) (bool, error) {
	return _HardforkRegistryV1.Contract.IsActive(&_HardforkRegistryV1.CallOpts, name)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_HardforkRegistryV1 *HardforkRegistryV1Caller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _HardforkRegistryV1.contract.Call(opts, out, "proxy")
	return *ret0, err
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_HardforkRegistryV1 *HardforkRegistryV1Session) Proxy() (common.Address, error) {
	return _HardforkRegistryV1.Contract.Proxy(&_HardforkRegistryV1.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_HardforkRegistryV1 *HardforkRegistryV1CallerSession) Proxy() (common.Address, error) {
	return _HardforkRegistryV1.Contract.Proxy(&_HardforkRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_HardforkRegistryV1 *HardforkRegistryV1Caller) V1storage(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _HardforkRegistryV1.contract.Call(opts, out, "v1storage")
	return *ret0, err
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_HardforkRegistryV1 *HardforkRegistryV1Session) V1storage() (common.Address, error) {
	return _HardforkRegistryV1.Contract.V1storage(&_HardforkRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_HardforkRegistryV1 *HardforkRegistryV1CallerSession) V1storage() (common.Address, error) {
	return _HardforkRegistryV1.Contract.V1storage(&_HardforkRegistryV1.CallOpts)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_HardforkRegistryV1 *HardforkRegistryV1Transactor) Destroy(opts *bind.TransactOpts, _newImpl common.Address) (*types.Transaction, error) {
	return _HardforkRegistryV1.contract.Transact(opts, "destroy", _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_HardforkRegistryV1 *HardforkRegistryV1Session) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _HardforkRegistryV1.Contract.Destroy(&_HardforkRegistryV1.TransactOpts, _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_HardforkRegistryV1 *HardforkRegistryV1TransactorSession) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _HardforkRegistryV1.Contract.Destroy(&_HardforkRegistryV1.TransactOpts, _newImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_HardforkRegistryV1 *HardforkRegistryV1Transactor) Migrate(opts *bind.TransactOpts, _oldImpl common.Address) (*types.Transaction, error) {
	return _HardforkRegistryV1.contract.Transact(opts, "migrate", _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_HardforkRegistryV1 *HardforkRegistryV1Session) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _HardforkRegistryV1.Contract.Migrate(&_HardforkRegistryV1.TransactOpts, _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_HardforkRegistryV1 *HardforkRegistryV1TransactorSession) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _HardforkRegistryV1.Contract.Migrate(&_HardforkRegistryV1.TransactOpts, _oldImpl)
}

// Propose is a paid mutator transaction binding the contract method 0x072a9823.
//
// Solidity: function propose(uint256 block_no, bytes32 name, bytes32 block_hash, uint256 sw_features) returns()
func (_HardforkRegistryV1 *HardforkRegistryV1Transactor) Propose(opts *bind.TransactOpts, block_no *big.Int, name [32]byte, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _HardforkRegistryV1.contract.Transact(opts, "propose", block_no, name, block_hash, sw_features)
}

// Propose is a paid mutator transaction binding the contract method 0x072a9823.
//
// Solidity: function propose(uint256 block_no, bytes32 name, bytes32 block_hash, uint256 sw_features) returns()
func (_HardforkRegistryV1 *HardforkRegistryV1Session) Propose(block_no *big.Int, name [32]byte, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _HardforkRegistryV1.Contract.Propose(&_HardforkRegistryV1.TransactOpts, block_no, name, block_hash, sw_features)
}

// Propose is a paid mutator transaction binding the contract method 0x072a9823.
//
// Solidity: function propose(uint256 block_no, bytes32 name, bytes32 block_hash, uint256 sw_features) returns()
func (_HardforkRegistryV1 *HardforkRegistryV1TransactorSession) Propose(block_no *big.Int, name [32]byte, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _HardforkRegistryV1.Contract.Propose(&_HardforkRegistryV1.TransactOpts, block_no, name, block_hash, sw_features)
}

// Remove is a paid mutator transaction binding the contract method 0x95bc2673.
//
// Solidity: function remove(bytes32 _hardfork_name) returns()
func (_HardforkRegistryV1 *HardforkRegistryV1Transactor) Remove(opts *bind.TransactOpts, _hardfork_name [32]byte) (*types.Transaction, error) {
	return _HardforkRegistryV1.contract.Transact(opts, "remove", _hardfork_name)
}

// Remove is a paid mutator transaction binding the contract method 0x95bc2673.
//
// Solidity: function remove(bytes32 _hardfork_name) returns()
func (_HardforkRegistryV1 *HardforkRegistryV1Session) Remove(_hardfork_name [32]byte) (*types.Transaction, error) {
	return _HardforkRegistryV1.Contract.Remove(&_HardforkRegistryV1.TransactOpts, _hardfork_name)
}

// Remove is a paid mutator transaction binding the contract method 0x95bc2673.
//
// Solidity: function remove(bytes32 _hardfork_name) returns()
func (_HardforkRegistryV1 *HardforkRegistryV1TransactorSession) Remove(_hardfork_name [32]byte) (*types.Transaction, error) {
	return _HardforkRegistryV1.Contract.Remove(&_HardforkRegistryV1.TransactOpts, _hardfork_name)
}

// HardforkRegistryV1HardforkIterator is returned from FilterHardfork and is used to iterate over the raw logs and unpacked data for Hardfork events raised by the HardforkRegistryV1 contract.
type HardforkRegistryV1HardforkIterator struct {
	Event *HardforkRegistryV1Hardfork // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HardforkRegistryV1HardforkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HardforkRegistryV1Hardfork)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HardforkRegistryV1Hardfork)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HardforkRegistryV1HardforkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HardforkRegistryV1HardforkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HardforkRegistryV1Hardfork represents a Hardfork event raised by the HardforkRegistryV1 contract.
type HardforkRegistryV1Hardfork struct {
	BlockNo    *big.Int
	BlockHash  [32]byte
	Name       [32]byte
	SwFeatures *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterHardfork is a free log retrieval operation binding the contract event 0xb22930fde3f4a5bddcb906dc3248ab30f4549101ef99a59fbfbf6121d74c17c5.
//
// Solidity: event Hardfork(uint256 block_no, bytes32 block_hash, bytes32 name, uint256 sw_features)
func (_HardforkRegistryV1 *HardforkRegistryV1Filterer) FilterHardfork(opts *bind.FilterOpts) (*HardforkRegistryV1HardforkIterator, error) {

	logs, sub, err := _HardforkRegistryV1.contract.FilterLogs(opts, "Hardfork")
	if err != nil {
		return nil, err
	}
	return &HardforkRegistryV1HardforkIterator{contract: _HardforkRegistryV1.contract, event: "Hardfork", logs: logs, sub: sub}, nil
}

// WatchHardfork is a free log subscription operation binding the contract event 0xb22930fde3f4a5bddcb906dc3248ab30f4549101ef99a59fbfbf6121d74c17c5.
//
// Solidity: event Hardfork(uint256 block_no, bytes32 block_hash, bytes32 name, uint256 sw_features)
func (_HardforkRegistryV1 *HardforkRegistryV1Filterer) WatchHardfork(opts *bind.WatchOpts, sink chan<- *HardforkRegistryV1Hardfork) (event.Subscription, error) {

	logs, sub, err := _HardforkRegistryV1.contract.WatchLogs(opts, "Hardfork")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HardforkRegistryV1Hardfork)
				if err := _HardforkRegistryV1.contract.UnpackLog(event, "Hardfork", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
